{
  "微服务": {
    "微服务应用 4 个设计原则 ": {
      "AKF 拆分原则": "X 轴 ：指的是水平复制，很好理解，就是讲单体系统多运行几个实例，做个集群加负载均衡的模式。Z 轴 ：是基于类似的数据分区，比如一个互联网打车应用突然或了，用户量激增，集群模式撑不住了，那就按照用户请求的地区进行数据分区，北京、上海、四川等多建几个集群。Y 轴 ：就是我们所说的微服务的拆分模式，就是基于不同的业务拆分。",
      "前后端分离 ": "前后端分离原则，简单来讲就是前端和后端的代码分离也就是技术上做分离，我们推荐的模式是最好直接采用物理分离的方式部署，进一步促使进行更彻底的分离。不要继续以前的服务端模板技术，比如 JSP ，把 Java JS HTML CSS 都堆到一个页面里，稍复杂的页面就无法维护。",
      "无状态服务 ": "对于无状态服务，首先说一下什么是状态：如果一个数据需要被多个服务共享，才能完成一笔交易，那么这个数据被称为状态。进而依赖这个“状态”数据的服务被称为有状态服务，反之称为无状态服务。",
      "Restful 通信风格 ": "作为一个原则来讲本来应该是个“无状态通信原则”，在这里我们直接推荐一个实践优选的 Restful 通信风格 ，因为他有很多好处：无状态协议 HTTP，具备先天优势，扩展能力很强。例如需要安全加密是，有现成的成熟方案 HTTPS 可用。JSON 报文序列化，轻量简单，人与机器均可读，学习成本低，搜索引擎友好。语言无关，各大热门语言都提供成熟的 Restful API 框架，相对其他的一些 RPC 框架生态更完善。"
    },
    "微服务平台的 19 个落地实践 ": {
      "企业 IT 建设的三大基础环境 ": {
        "团队协作环境": "主要是 DevOps 领域的范畴，负责从需求到计划任务，团队协作，再到质量管理、持续集成和发布。",
        "个人基础环境": "就是本文介绍的微服务应用平台，他的目标主要就是要支撑微服务应用的设计开发测试，运行期的业务数据处理和应用的管理监控。",
        "IT 基础设施": "就是我们通常说的各种运行环境支撑如 IaaS (VM 虚拟化) 和 CaaS (容器虚拟化) 等实现方式。"
      },
      "微服务应用平台总体架构 ": {
        "开发集成": "主要是搭建一个微服务平台需要具备的一些工具和仓库",
        "运行时": "要有微服务平台来提供一些基础能力和分布式的支撑能力，我们的微服务运行容器则会运行在这个平台之上。",
        "监控治理": "则是致力于在运行时能够对受管的微服务进行统一的监控、配置等能力。",
        "服务网关": "则是负责与前端的 WEB 应用 移动 APP 等渠道集成，对前端请求进行认真鉴权，然后路由转发。"
      },
      "微服务平台的设计目标": {
        "微服务平台的设计目标": "微服务平台的主要目标主要就是要支撑微服务应用的全生命周期管理，从需求到设计开发测试，运行期的业务数据处理和应用的管理监控等，后续将从应用生命周期的几个重要阶段切入，结合前面提到的设计原则和问题，介绍平台提供的能力支撑情况。"
      }
    }
  },
  "微服务组件": {
    "服务注册发现路由 ": "",
    "统一认证鉴权 ": "",
    "日志与流水设计 ": "",
    "集中配置管理 ": "",
    "统一管理门户 ": "",
    "分布式事务问题 ": "",
    "分布式同步调用问题 ": ""
  },
  "SpringCloud": {
    "API Doc": "Swagger UI",
    "API Mock": "Swagger Mock API",
    "AOP基础框架": "Spring framework",
    "微服务容器": "Spring Boot",
    "服务注册中心": "Spring Cloud-Eureka",
    "服务负载均衡": "Spring Cloud-Ribbon",
    "服务调用": "Spring Cloud-Feign",
    "服务容错保护": "Spring Cloud-Hystrix",
    "安全认证": "Spring Cloud-Security",
    "服务配置中心": "Apollo,Spring Cloud-Config",
    "服务监控": "Spring Boot Admin"
  }
}