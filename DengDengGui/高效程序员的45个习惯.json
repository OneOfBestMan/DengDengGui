{
  "1、做事": "指现不会修复bug,把矛头对准问题的解决办法，而不是人，这是真正有用处的正面效应。",
  "2、欲速则不达": "不要坠入快速的简单修复之中。要投入时间和精力保持代码的整洁、敞亮。",
  "3、对事不对人": "对事不对人，让我们骄傲的应该是解决了问题，而不是比较谁出的主意更好。",
  "4、排除万难，奋勇前进": "做正确的事，要诚实，要有勇气去说出实情，有时，这样做很困难，所以我们要有足够的勇气。",
  "5、跟踪变化": "跟踪技术变，你不需要精通所有技术，但需要清楚知道行业的动向，从而规划你的项目和职业生涯。",
  "6、对团队投资": "提供你和团队学习的更好平台，通过生午餐会议可以增进每个人的知识和技能，并帮助大家聚集在一起进行沟通交流。唤起人们对技术和技巧的激情，将会对项目大有裨益。",
  "7、懂得丢弃": "学习新东西，丢弃旧的东西。在学习一门新技术的时候，要丢弃会阴止你前进的旧习惯。毕竟，汽车比马车车厢强得多",
  "8、打破砂锅问到底": "不停地问为什么。不能只满足于别人告诉你的表面现象。要不停地提问直到你明白问题的根源。",
  "9、把握开发节奏": "解决任务，在事情变得一团糟之前。保持事件之间稳定重复的间隔，更容易解决常见的重复任务。",
  "10、让客户做决定": "让客户做决定。开发者、经理或者业务分析师不应该做业务方面的决定。用业务负责人能够理解的语言，向他们详细解释遇到的问题，并让他们做决定。",
  "11、让设计指导而不是操纵开发": "好设计是一张地图，它也会进化。设计指引你向正确的方向前进，它不是殖民地，它不应该标识具体的路线。你不要被设计操纵。",
  "12、合理的使用技术": "根据需要选择技术。首先决定什么是你需要的，接着为这些具体的问题评估使用技术。对任何要使用的技术多问一些挑剔的问题，并真实地作出问答。",
  "13、保持可以发布": "保持你的项目时刻可以发布。保证你的系统随时可以编译、运行、测试并产即部署。",
  "14、提早集成，频繁集成": "提早集成，频繁集成。代码集成是主要的风险来源。要想规避这个风险，只有提早集成，持续而有规律地进行集成。",
  "15、提早实现自动化部署": "一开始就实现自动化部署应用，使用部署系统安装你的应用，在不同的机器上用不同的配置文件测试依赖的问题。质量保证人员要像测试应用一样测试部署。",
  "16、使用演示获得频繁反馈": "清晰可见的开发，在开发的时候要保持应用可见，每隔一周或者两周，邀请所有的客户，给他们演示最新的功能，积极儿得他们的反馈。",
  "17、使用短迭代，增量发布": "增量开发，发布带有最小却可用功能块的产品。每个增量开发中，使用1~4周左右迭代周期。",
  "18、固定价格就意味洋背叛承诺": "基于真实工作的评估。让团队和客户一起，真正地在当前项目中工作，做具体实际的评估。由客户控制他们要的功能和预算。",
  "19、守护天使": "使用自动化的单元测试，好的单元测试能够为你的代码问题提供及时的警报，如果没有到位的单元测试，不要进行任何设计和代码修改。",
  "20、": "",
  "21、": "",
  "22、": "",
  "23、": "",
  "24、": "",
  "25、": "",
  "26、": "",
  "27、": "",
  "28、": "",
  "29、": "",
  "30、": "",
  "31、": "",
  "32、": "",
  "33、": "",
  "34、": "",
  "35、": "",
  "36、": "",
  "37、": "",
  "38、": "",
  "39、": "",
  "40、": "",
  "41、": "",
  "42、": "",
  "43、": "",
  "44、": "",
  "45、": ""
}