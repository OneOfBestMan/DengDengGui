{
  "一般知识": {
    "通用语言": "通过团队交流达成共识的能够简单清晰准确传递业务规则的语言（可以是文字、图片等）",
    "领域": "核心领域，通用子域，支撑子域",
    "领域模型": "是对我们软件系统中要解决问题的抽象表达。",
    "实体": "实体 = 唯一身份标识 + 可变性【状态（属性） + 行为（方法或领域事件或领域服务）",
    "值的特征": "1、表示一个具体概念 2、通过值属性对其识别 3、属性叛等 4、固定不变",
    "值对象": "值对象=值+对象=将一个值用对象的方式进行表述，来表达一个具体的固定不变的概念。",
    "值对象特征": "1、描述了领域中的一件东西 2、不可变的 3、将不同的相关属性组合成了一个概念整体 4、当度量和描述改变时，可以用另外一个值对象予以替换 5、可以和其他值对象进行相等性比较 6、不会对协和对象造成副作用",
    "应用服务": "应用服务是用来表达用例和用户故事（User Story)的主要手段。",
    "领域服务": "用来协调领域对象完成某个操作，用来处理业务逻辑的，它本身是一个行为，所以是无状态的。状态由领域对象（具有状态和行为）保存。",
    "领域事件": "领域事件 = 事件发布 + 事件存储 + 事件分发 + 事件处理。"
  },
  "分层": {
    "表示层": "负责显示信息给用户，并解释用户命令",
    "应用层": "这一层非常薄，用于协调领域模型对象的动作。不建议这一层包含业务规则或领域知识，即使是维护状态也不行――这是领域模型做的事情。应用层对于协调任务和把动作委托给领域模型非常有用。虽然不用于维护业务实体的状态，但应用层可以维护跟踪用户或者系统所执行的当前任务的状态。应用层不干涉或阻碍领域模型，这一点非常重要。领域模型表示了业务模型的重要部分",
    "领域层": "这是一个系统中旋转业务逻辑和规则的地方，是软件的心脏。领域层控制和使用特定业务概念或情况的状态，但该层如何存储实际上是委托给基础设施层。领域层包含业务模型，领域逻辑不会分散到其他层，这两点在领域驱动设计中是绝对关镇定的。",
    "基础设施层": ""
  }
}